#!sh
test -d ~/local/lib && test $LD_LIBRARY_PATH && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/local/lib || export LD_LIBRARY_PATH=~/local/lib
if ls --color >/dev/null 2>&1 
then
	ls -ld --color .cache | awk /$USER/'{print$(NF-2)" "$(NF-1)" "$NF}'
else
	#C'est le cas pour Android
	ls -ld .cache | awk /$USER/'{print$(NF-2)" "$(NF-1)" "$NF}'
fi
	
if [ -e /etc/os-release ]
then
	if grep -q ID=sailfishos /etc/os-release
	then
		export system=$(. /etc/os-release && echo "$NAME $VERSION_ID")
	elif which lsb_release >/dev/null 2>&1 
	then
		export system="$(lsb_release -sd | awk -F '"' '{print$(NF-1)}')"
	else
		ID=$(awk -F"=" '/^ID\>/{print$2}' /etc/os-release)
		case $ID in
			debian) export system="$(. /etc/os-release && echo $PRETTY_NAME | sed "s/[0-9]\+/$(cat /etc/debian_version)/")" ;;
			ubuntu) export system="$(. /etc/os-release && echo $PRETTY_NAME)" ;;
		esac
	fi
	grep -q ID=sailfishos /etc/os-release && test -r $initDir/.bash_profile.SailfishOS && source $initDir/.bash_profile.SailfishOS
else
	export system=$(echo $HOSTTYPE-$OSTYPE | sed "s/arm[^-]*-/arm-/")
fi

trap 'echo "=> Ignoring this step and continuing the script <$(basename $BASH_SOURCE)> ..." >&2' INT
setxkbmap -layout fr >/dev/null 2>&1
groups 2>/dev/null | egrep -wq "sudo|admin" && xhost SI:localuser:root >/dev/null 2>&1 #Permet a root de lancer des applis graphiques
trap - INT

groups 2>/dev/null | egrep -wq "sudo|admin" || mkdir -p ~/.local/lib/mlocate/ ~/.local/share/applications/ 2>/dev/null
[ $TERM = linux ] && setterm -blength 0 > $(tty)

#Choix d'une splash image grub aleatoire
test -w /boot/grub/today.jpg && find /datas/ImagesVersets/ -type f | egrep -q '(png|jpg)$' && cp -pv "$(shuf -n1 -e /datas/ImagesVersets/*/*.{jpg,png})" /boot/grub/today.jpg

#Cleanup previous XFCE Sessions
rm -f ~/.cache/sessions/xf*

#printf "=> Server Signature : " >&2;ssh-keygen -lf /etc/ssh/ssh_host_rsa_key >&2
if ip link show eth0 >/dev/null 2>&1 && [ -z $DISPLAY ]
then
	printf "=> eth0 MAC@ : " >&2
	ip link show eth0 | awk '/ether/{print$(NF-2)}' >&2
fi

trap 'echo "=> Ignoring this step and continuing the script <$(basename $BASH_SOURCE)> ..." >&2' INT
if which gsettings >/dev/null 2>&1 && [ $DISPLAY ]; then
	if ! ldd $(which gsettings) 2>&1 | grep -q not.found; then
	gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier "<Alt>" && gsettings set org.gnome.desktop.wm.preferences resize-with-right-button true && gsettings set org.gnome.desktop.input-sources xkb-options "['terminate:ctrl_alt_bksp']"
fi >/dev/null
fi
trap - INT

which matlab >/dev/null 2>&1 && test -d "$HOME/.matlab" && export MATLAB=$(\ls -d "$HOME/.matlab/"* | head -1)
which git >/dev/null && git config --global credential.helper "cache --timeout=86400"
