#!/bin/bash
#
#  linux-purge - Linux kernel purging tool for Ubuntu Linux
#
#  Notable dependencies: apt, util-linux, whiptail|dialog, linux-base,
#  coreutils, lsb-release.
#
#  Editing: Use tabulator width 4 for indentation.
#
#  Copyright (C) Jarno Ilari Suni <8@iki.fi>
#
#    Author: Jarno Ilari Suni <8@iki.fi>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, version 3 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
set -u -e
export LC_ALL=C # Use C locale to get standard sorting and better regex
# performance.

export TMPDIR=/dev/shm # set mktemp use tmpfs filesystem by default
# if template is not given as absolute path.

readonly program_name='linux-purge' \
program_full_name='Linux Purge for Ubuntu' \
program_version=1.0.187-d5e0d90 \
copyright_years='2017-2023' \
MB=1000000 \
width=72
readonly w_error='Terminal screen not wide enough. Minimum is '$width' columns.' \
h_error='Not enough lines in terminal screen.' \
lockfile='/var/lib/dpkg/lock' \
boot=$(stat  --format="%m" /boot) # = mount point under which /boot is found
readonly cs=';' # column separator used for dialog command. Will be displayed
# as is with whiptail command. It should not contain space.
readonly error_file=$(mktemp $TMPDIR/linux-purge.error_XXX)

# Default values for command line options:
keep= # explicit keep option not detected
auto_only= # Do not restrict purging to automatically installed packages.
clear_boot= # Do not clear system from files unknown to dpkg.
choose= # Do not let user choose kernels to purge interactively.
debug= # not debug mode
debug_file=
show_debug_filename= # do not show debug filename
fix= # do not fix
info= # do not show info
simulate= # no simulation
yes= # interactive mode
manual= # do not mark manually installed for purge
legend=1 # display legend in checklist by default
list=
optimize= # Do not optimize by default
interface=d
operation=purge
no_booted=0

# update-grub control variables
update_grub_disabled=
update_grub=

# Make sure certain variables are not set.
unset -v LatestReleases ManualReleases HoldReleases

error() {
	printf '[%s] ERROR: %s\n' "$program_name" "$1" | fold -s >&2
	[[ ${3+x} ]] || echo 1 >"$error_file"
	exit "${2:-1}"
}

warn() {
	printf '[%s] WARNING: %s\n' "$program_name" "$1" | fold -s >&2
}

note() {
	printf '[%s] NOTE: %s\n' "$program_name" "$1" | fold -s
}

restore_update_grub() {
	if [[ $update_grub_disabled ]]; then
		chmod +x "$update_grub"
		note "Made '$update_grub' executable again."
		update_grub_disabled=
	fi
}

finish() {
	err=$?
	trap - EXIT
	[[ $(<"$error_file") ]] && err=0
	rm -- "$error_file"
	restore_update_grub
	[[ $debug_file ]] && {
		if [[ -f $debug_file && ! -s $debug_file ]]; then
			# remove empty regular file
			rm -- "$debug_file"
		else
			[[ ${SUDO_UID:+x} ]] \
			 && chown "$SUDO_UID:$SUDO_UID" "$debug_file"
			[[ $show_debug_filename ]] \
			 && note "The debug information is saved in
${debug_file}" >&2
		fi
	}

	if [[ ${1:-null} == INT ]]; then note 'Interupted' >&2
	elif (( err != 0 && err != 141 )); then
		error "Aborting due to an unknown error ($err)." 3 .
	fi

	return 0
}

# NOTE: in case of power cut this will not be done and update-grub may
# be left non-executable!
trap finish EXIT
trap 'finish INT; trap - INT; kill -s INT -- $$' INT

debug() {
	PS4='+ $FUNCNAME() $LINENO: '
	{
		printf '## start time: '
		date
		printf '## linux-purge version: %s\n' $program_version
		printf '## options: %s\n' "$params"
		printf '## OS: '; lsb_release -ds \
		|| echo 'N/A (Hint: Install lsb-release)'
		printf '## awk executable: '; $path_resolver -e "$(command -v awk)"
		printf '## awk version:\n'
		awk -Wversion --version 2>&1
		printf '## linux packages:\n'
		dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' linux-'*'
		printf '\n## trace and output:\n'
	} >$debug_file
	exec {FD}>>"$debug_file"
	export BASH_XTRACEFD="$FD" # Bash trace goes only to debug file
	set -x
	"$@" > >(tee -ia -- "$debug_file") 2> >(tee -ia -- "$debug_file" >&2)
	set +x
}

progress_animation() {
	while :; do
		for i in '-' '\' '|' '/'; do
			printf '%s\r' $i
			sleep 0.1
		done
	done
}

run_update_grub() {
	restore_update_grub
	"$update_grub"
}

# Usage info
show_help() {
# Convert tabs by 4 spaces in the here document.
sed 's/\t/    /g' <<EOF
Usage: $program_name [-borsy] [-c [-n] [-i APP]] [-k NUM [-a] | -m] [-d[FILE]]
or: $program_name --list [-r] [-c [-n] [-i APP]] [-k NUM [-a] | -m] [-d[FILE]]
or: $program_name --fix [-bnrs] [-i APP] [-d[FILE]]
or: $program_name {--help | --version | --info [-d[FILE]]}

Purge versioned kernel packages according to user's orders. Purging is
not restricted to linux-image packages, but all versioned linux-*
packages matching desired releases. Also purges such versioned
kernel packages that have the respective linux-image package missing
or marked for removal or purge, and packages that have just
configuration files remaining. Does not purge such versioned kernel
packages that have respective successfully installed linux-image
package marked with "hold" unless chosen interactively with --choose
option.

If usual purging fails, using --fix option may help.

Options:

 -a, --auto-only      Only purge kernels that have been marked as being
					  automatically installed.
 -b, --clear-boot     Check /boot for kernels unknown to the package
					  management system, and if such files are found,
					  offer to remove them.
 -c, --choose         Choose interactively which kernels to purge. Other
					  options determine which kernels are selected to
					  start with.
 -d, --debug[=FILE]   Write the command trace and some other debug
					  information in the given FILE. If FILE is not
					  given, a file in a tmpfs is created and the name
					  is shown in stderr finally.
 -f, --fix            Use this, if the program fails otherwise. Try to
					  fix broken dependencies, which are typical in case
					  a filesystem has no space left. If needed, try to
					  purge given kernel(s) interactively by using
					  different methods to be able to purge kernels from
					  a system with broken dependencies and/or lack of
					  free inodes.
 -h, --help           Display this help and exit.
 --info               Show some kernel related information using pager.
 -i, --interface=APP  Use application APP for generating user interface
					  when selecting kernels with option --choose and
					  --fix. Supported values for APP:

						d or dialog (default)

						w or whiptail (fallback)

 -k, --keep=NUM       Keep NUM latest kernels that have earlier version
					  and same flavour than each kernel a meta-kernel
					  (such as linux-image-generic) depends on.
 -l, --list           Only output the packages that would be purged (or
					  removed, if -r was used). The list may not be
					  complete, as there may be some packages depending
					  on those.
 -m, --manual         Purge kernels that have been marked as being
					  manually installed.
 -n, --no-legend      Do not display legend in checklist with options
					  --choose and --fix.
 -o, --optimize       Run update-grub only once in normal operation.
					  IMPORTANT: If linux-purge gets killed when this
					  option is used, updage-grub may be left
					  non-executable! In that case you can run
					  linux-purge again to enable update-grub.
 -r, --remove         Remove packages instead of purging them.
 -s, --simulate       Dry-run; do not actually remove packages. You may
					  run this as regular user. Note that in some cases
					  simulation is not complete since some actions may
					  depend on others being done for real beforehand.
 -t, --no-booted      Does not detect or protect the booted kernel. This
					  is a dangerous option meant to be used when run
					  inside a container.
 -v, --verbose        add -V to APT operations
 -V, --version        Print version.
 -y, --yes            Purge without user confirmation.

Report bugs at: <https://bugs.launchpad.net/linux-purge/+filebug>
Use --debug option and attach the generated file.
linux-purge home page: <https://launchpad.net/linux-purge>
EOF
}

show_version() {
cat <<EOF
$program_name ($program_full_name) $program_version
Copyright (C) $copyright_years Jarno Ilari Suni and possible other authors
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
EOF
}

# Make fixed string safe to use as part of regular expression, not
# within a character class though.
literalize() {
	printf '%s' "$1" | sed -e 's/[^^]/[&]/g' -e 's/\^/\\^/g'
}

# Print megabytes availabe on /boot
avail_boot() {
	printf %s $(($(stat -f --format="%f*%S" /boot)/MB))
}

# Print megabytes allocated in /boot for release given in $1
get_release_size_boot() {
	printf %s $(((0$(stat --printf='+%b*%B' /boot/*-$1{,.*} \
	2>/dev/null))/MB))
}

# Get comprehensive list of meta kernel packages that may depend on kernels;
# list packages that are desired to be installed (or hold) even if they
# are not successfully installed.
# Note: Depends on Ubuntu's package naming policy
# Returns zero, if some meta kernel is found; otherwise returns non-zero.
get_meta_kernels() {
	dpkg-query -W -f '${db:Status-Abbrev} ${Package}\n' \
	| awk '/^[ih].. linux-(.+-)?image-/{print $2}' \
	| grep -Ev '[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+'
}

# Get list of latest installed kernel releases that installed meta kernels
# depend on.
# Note: Depends on Ubuntu's package naming policy
get_latest_releases() {
	local meta_kernels; meta_kernels=$(get_meta_kernels) || return 0
	dpkg-query -W -f '${Depends}\n${Pre-Depends}\n' $meta_kernels \
	| sed -r -e 's/ \([^)]*\)//g' -e 's/,? (\| )?/\n/g' \
	| sed -nr 's/^linux-.*-([0-9]+\.[0-9]+\.[0-9]+.*)/\1/p' \
	| linux-version sort | uniq
}

# Get list of latest available kernel releases that installed meta kernels
# depend on.
# Note: Depends on Ubuntu's package naming policy
get_latest_available_releases() {
	local meta_kernels; meta_kernels=$(get_meta_kernels) || return 0
	apt-cache depends --important $meta_kernels \
	| sed -nr 's/^.*: linux-.*-([0-9]+\.[0-9]+\.[0-9]+.*)/\1/p' \
	| linux-version sort | uniq
}

# Get the list of Linux releases that have a linux image package marked
# as being manually installed.
get_manual_releases() (
# apt-mark showmanual | sed -rn 's/linux-(signed-)?image-(unsigned-)?([0-9]+\.[0-9]+\.[0-9]+[^:]*).*/\3/p'
# Instead of using apt-mark, use the following script to do the job faster;
# LP: #1713219

	auto_file='/var/lib/apt/extended_states'
	eval $(apt-config shell auto_file Dir::State::extended_states/f)

	set -o pipefail
	dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' \
	| awk -v file="$auto_file" '
	/^.i  linux-(signed-)?image-(unsigned-)?[0-9]+\.[0-9]+\.[0-9]+/ {
		img[$2]=""
	}
	function print_release(pkg) {
		match(pkg, /.*-image-(unsigned-)?/)
		print substr(pkg, RLENGTH+1)
	}
	END{
		while ((getline < file)>0) {
			if ($1=="Package:") {
				pkg=$2; c=1
				if (pkg in img) {
					while ((getline < file) > 0 && $0) {
						if ($1 == "Auto-Installed:") {
							if ($2==1) delete img[pkg]
							else if ($2!=0) exit 5
							break
						}
					}
				}
			}
		}
		close(file)
		if (!c) exit 6
		for (pkg in img) print_release(pkg)
	}' | linux-version sort | uniq
)

get_hold_releases() {
	dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' |
	 sed -nr 's/^hi  linux-image-(unsigned-)?([0-9]+\.[0-9]+\.[0-9]+.*)/\2/p'
}

get_set_complement() {
	comm -23 <(sort -u <(printf %s "$1")) <(sort -u <(printf %s "$2")) \
	| linux-version sort
}

get_info() {
	printf 'Operating system: '; lsb_release -ds \
	|| echo 'N/A (Hint: Install lsb-release)'
	local b; ((no_booted)) && b='N/A' || b=$current
	printf 'Booted kernel: %s\n' "$b"
	((no_booted)) ||
	printf 'Size of the kernel (in /boot): %i MB\n'  "$(get_release_size_boot $current)"
	printf 'Space used in /boot: %s MB\n' "$(du --summarize \
	--block-size=MB /boot 2>/dev/null | cut -f1 -dM)"
	printf 'Free space in /boot: %i MB (for superuser)\n' "$(avail_boot)"
	printf 'Mount point of /boot directory: %s\n' "$boot"
	printf '\n'
	printf 'Inode usage of /usr/src (including linux headers):\n'
	df --inodes /usr/src

	printf '\n%s\n' 'Versioned Linux Packages in System:'
	dpkg --list 'linux-*' \
	| awk 'NR<6 || ($1 !~ "^un" && $2 ~ "-[0-9]+\.[0-9]+\.[0-9]+")'
	echo

	local meta_kernels
	meta_kernels=$(get_meta_kernels) || {
		printf '%s\n' 'WARNING: No meta kernels found.'
		exit
	}

	local -A avail
	local -r regex1=': linux-.*-([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+.*)'
	while IFS= read -r line; do
		[[ ${line:0:1} == l ]] && kernel=$line || {
			[[ $line =~ $regex1 ]] && avail[$kernel]="${BASH_REMATCH[1]}"
		}
	done < <(apt-cache depends --important $meta_kernels)

	local -A inst
	local -r regex2='([^ ]*).* (linux-.*-([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+[^, ]*))'
	while IFS= read -r line; do
		[[ $line =~ $regex2 ]] && inst[${BASH_REMATCH[1]}]=${BASH_REMATCH[3]}
	done < <(dpkg-query -W -f '${Package} ${Depends} ${Pre-Depends}\n' $meta_kernels)

	local -a meta; mapfile -t meta <<<"$meta_kernels"
	# resolve maximum length for output formatting
	local l maxlength=0;
	for i in ${!meta[*]}; do
		l=${#meta[i]}; (( l > maxlength )) && maxlength=$l;
	done
	local -r title='Meta-kernel package'
	l=${#title}; (( ++l > maxlength )) && maxlength=$l;
	local -r format="%-${maxlength}s %-25s %-25s\n"
	printf "$format" "$title" 'Latest available release' 'Latest Installed release'
	for i in ${!meta[*]}; do
		metapkg=${meta[$i]}
		[[ -z ${inst[$metapkg]+x} && -z ${avail[$metapkg]+x} ]] && unset "meta[$i]" \
		|| printf "$format" $metapkg ${avail[$metapkg]-} ${inst[$metapkg]-}
	done
	echo

	local manual_meta
	manual_meta=$(apt-cache rdepends --installed --important \
	 --recurse $meta_kernels | grep -v -e '^Reverse Depends:' -e '^ ' \
	 | sort -u | xargs -r apt-mark showmanual)
	local dependencies=
	[[ $manual_meta ]] && {
		printf '%s\n' 'Related Manually Installed Meta Packages:'
		printf '%s\n' "$manual_meta"
		dependencies=$(apt-cache depends --installed --important \
		 $manual_meta | awk '$1 == "Depends:"{print $2}')
	} || printf '%s\n' 'WARNING: No manually installed meta kernels found.'

	printf '\n%s\n' 'Respective Packages in System:'
	dpkg --list $meta_kernels $manual_meta $dependencies
}

run_pager() {
	local pager; pager=$($path_resolver -e "$(command -v pager)")
	case ${pager##*/} in
		less) "$pager" --no-init --quit-on-intr --quit-if-one-screen \
--chop-long-lines -- "$@" ;;
		*) "$pager" -- "$@"
	esac
}

# Effectively runs '$1 | $2', but there will no be broken pipe error
# or PIPE signal, if $2 quits before $1.
# If exit status of $2 is non-zero, exit status of this function is exit
# status of $2; otherwise it is the same as normal pipe would have.
entire_pipe() {
	( set -m; (
		trap 'exit 0' INT
		echo $BASHPID
		$1
	) & wait $! ) |
	(
		trap 'trap - EXIT; kill -s INT -- -$pid 2>/dev/null || :' EXIT
		read -r pid
		$2
	)
}

show_info() (
	set -o pipefail
	entire_pipe get_info run_pager
)

# Delete extra initrd.img backups (LP: #1515513)
remove_extra_initrds() (
	# First remove possible leftover temporary mkinitramfs files
	# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=814345
	rm -rfv ${TMPDIR:-/var/tmp}/mkinitramfs-*

	local release='' response=''
	cd /boot
	# Assume filenames at /boot are nice i.e. do not contain newline etc.
	local initrd_releases; initrd_releases=$(ls initrd.img-* |
	 sed -r -e '/.*\.old-dkms$/d' -e '/.*\.bak$/d' -e 's/initrd\.img-(.*)/\1/')
	local vmlinuz_releases
	vmlinuz_releases=$(ls vmlinuz-* | sed -nr -e 's#\.efi\.signed$##' \
	-e 's#^vmlinuz-(.*)#\1#p')
	local extra_initrds; extra_initrds=$(for release in \
	$(get_set_complement "$initrd_releases" "$vmlinuz_releases"); do
	 echo initrd.img-${release}
	done)
	[[ $extra_initrds ]] && {
		[[ $yes ]] && note "Removing extra initrd.img files at /boot" || {
			printf '\nRemove the extra initrd.img file(s)
%s\nat /boot? [Y/n] : ' "$extra_initrds"
			read -r response && [[ ${response,,} =~ ^(y|$) ]] ;} &&
		rm -v $extra_initrds
	}
	local initrd_backup_releases
	initrd_backup_releases=$(ls initrd.img-*.old-dkms initrd.img-*.bak 2>/dev/null |
	 sed -r 's/initrd\.img-(.*)\.(old-dkms|bak)$/\1/')
	local extra_backups
	extra_backups=$(for release in \
	$(get_set_complement "$initrd_backup_releases" "$initrd_releases"); do
	 echo initrd.img-${release}.*
	done)

	[[ $extra_backups ]] && {
		[[ $yes ]] && note "Removing extra initrd.img backups at /boot" || {
			printf '\nRemove the extra initrd.img backup file(s)
%s\nat /boot? [Y/n] : ' "$extra_backups"
			read -r response && [[ ${response,,} =~ ^(y|$) ]] ;} &&
		rm -v $extra_backups
	}
	:
)

# Handle possible kernel files unknown to the package management system.
# http://askubuntu.com/a/779077/21005
clear_boot() {
	local ReleasesKnownToDpkg ReleasesOnBoot UnknownReleases
	ReleasesKnownToDpkg=$(dpkg-query -W -f='${Package}\n' |
	sed -nr 's/^linux-image-(unsigned-)?([0-9]+\.[0-9]+\.[0-9]+.*)/\2/p')
	# Assume filenames at /boot are nice i.e. do not contain newline etc.
	ReleasesOnBoot=$(ls /boot/vmlinuz-* |
	 sed -nr -e 's#\.efi\.signed$##' -e 's#/boot/vmlinuz-([0-9]+\..+)#\1#p' |
	  { grep -vFx "$current" || [[ $? -eq 1 ]]; })
	UnknownReleases=$(get_set_complement "$ReleasesOnBoot" \
	 "$ReleasesKnownToDpkg")
	[[ $UnknownReleases ]] && {
		local joined joined2
		[[ $UnknownReleases != *$'\n'* ]] \
		&& printf -v joined2 '%s, ' $(eval echo /boot/vmlinuz-$UnknownReleases*) \
		|| {
			printf -v joined '%s,' $UnknownReleases
			printf -v joined2 '%s, ' $(eval echo /boot/vmlinuz-{"${joined%,}"}*)
		}
		joined="${joined2%,*}"
		[[ $joined == *,* ]] && note "Unknown kernels ${joined%,*} \
and ${joined##*, } found." || note "Unknown kernel ${joined} found."
		[[ $simulate || $yes ]] \
		&& note "Will remove the kernels unknown to package management \
system and related files and directories:" \
		|| note "Some kernels are unknown to package management \
system. They will be listed below with related files and directories. \
You will be prompted to remove them. Answer y or Y to remove given \
files; press e.g. mere <return> to skip."
		local release version minus_flavour lversion regex arg pid
		for release in $UnknownReleases; do
			version=$(printf %s "$release" | cut -d- -f1,2)
			minus_flavour=${release:${#version}}
			# check, if also files without the flavour part can be
			# removed
			lversion=$(literalize "$version")
			dpkg-query -W -f='${Package}\n' 2>/dev/null |
			awk '(match($0,/-'"$lversion"'-.*/) &&
			  substr($0,RSTART+1)!=r){exit 1}' r=$release &&
			  regex=".*-$lversion($(literalize "$minus_flavour"))?$" ||
			   regex=".*-$(literalize "$release")$"

			# Show progress animation, if running in terminal:
			[ -t 0 ] && { progress_animation & pid=$!
				trap 'trap - ERR; kill $pid' ERR; } || pid=

			if [[ $simulate ]]; then
				find /boot/ /lib/ /usr/ /var/ -type d ! \( -readable \
-executable \) -prune -o -regextype posix-extended -regex "$regex" \
-printf 'Would remove %p\n'
				[[ $pid ]] && kill $pid
			else
				[[ $yes ]] && arg= || arg=I
				find /boot/ /lib/ /usr/ /var/ -regextype \
posix-extended -regex "$regex" -print -exec /bin/sh -euc '
[ "$1" ] && kill $1 2>/dev/null || :
i=$2
shift 2; rm -r$i -- "$@"' find-sh "$pid" "$arg" {} +
			fi
			[ -t 0 ] && trap - ERR
		done
		(( EUID != 0)) && warn "Would also possibly remove some \
directories and files that current user does not have permissions to. \
Hint: Run as superuser to be sure."
		[[ $update_grub ]] && $update_grub
	}
	:
}

# Get kernels to purge interactively
# $1 is space separated list of tag string, item string and status string
# entries. (See manual page of whiptail or dialog for more information.)
# Returns 0 in success, 1 in case of cancel, other value in case of possible
# error.
getReleasesToPurge() {
	local lines columns
	read -r lines columns < <(stty size)
	local -r title='Choose Which Kernels to '${operation^}
	local -r height=$((lines-6))
	[[ $columns -lt $width ]] && error "$w_error" 2
	local -r legend_text="Legend of the content on the right:
- asterisk (*): removing this will usually remove kernel metapackage
- plus (+): removing this will usually upgrade kernel metapackage
- letter H: the kernel is marked for hold
- letter M: the kernel is installed manually
- number: the size of the kernel within /boot in megabytes
Hint: Space bar toggles item's selection."
	local b; ((no_booted)) && b='N/A' || b=$current
	local -r infotext="Booted kernel: $b \
$(((no_booted)) || printf '(%s MB)' $(get_release_size_boot $current))
Free space on /boot: $(avail_boot) MB$([[ $boot != '/boot' ]] &&
	printf ' (mounted at %s)' "$boot")
$([[ $legend ]] && printf %s "$legend_text")"
	local -r infolines=$((1+$(printf %s "$infotext" | wc -l)))
	local -r listheight=$((height-infolines-6))
	[[ $listheight -lt 1 ]] && error "$h_error" 2
	if [[ $interface = d ]]; then
		export DIALOG_OK=0 DIALOG_CANCEL=1 DIALOG_ESC=1 DIALOG_ERROR=11
		dialog --title "$title" --stdout --keep-tite --separate-output \
		--backtitle "$program_full_name" --cr-wrap --column-separator $cs \
		--checklist "$infotext" $height $width $listheight $1
	else
		whiptail --title "$title" --separate-output \
		--backtitle "$program_full_name" \
		--checklist "$infotext" $height $width $listheight \
		$1 2>&1 >/dev/tty || return 1
	fi
}

# Get kernel to purge interactively.
# $1 is space separated list of kernel versions.
# Returns 0 in success, 1 in case of cancel, other value in case of possible
# error.
getVersionToPurge() {
	local lines columns
	read -r lines columns < <(stty size)
	local -r height=$((lines-6))
	[[ $columns -lt $width ]] && error "$w_error" 2
	local -r title='Choose Which Linux Kernel to '${operation^}
	local -r infotext='The program purges the chosen kernel in
a special way due to lack of free inodes.'
	local -r infolines=$((1+$(printf %s "$infotext" | wc -l)))
	local -r listheight=$((height-infolines-6))
	[[ $listheight -lt 1 ]] && error "$h_error" 2
	if [[ $interface = d ]]; then
		export DIALOG_OK=0 DIALOG_CANCEL=1 DIALOG_ESC=1 DIALOG_ERROR=11
		dialog --title "$title" --backtitle "$program_full_name" --keep-tite \
		--cr-wrap --no-items --stdout --menu "$infotext" $height $width \
		 $listheight $1
	else
		whiptail --title "$title" --backtitle "$program_full_name" \
		--noitem --menu "$infotext" $height $width $listheight \
		 $(for i in $1; do printf '%s 1 ' "$i"; done) 2>&1 >/dev/tty || return 1
	fi
}

free_some_inodes() {
	local varmp usrmp
	varmp=$(stat --format="%m" /var)
	usrmp=$(stat --format="%m"  /usr/src)
	[[ $varmp != "$usrmp" ]] &&
	 error "Too few inodes on the filesystem mounted at $varmp."
	# Try freeing some inodes by removing some files from /usr/src.
	# Prompt for one kernel to remove, if there are many to choose from.
	local HeaderVersions
	HeaderVersions=$(dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' \
| sed -rn 's/^.i  linux-(.*-)?headers-([0-9]+\.[0-9]+\.[0-9]+(-[^-]+)?).*/\2/p')
	HeaderVersions=$(get_set_complement "$HeaderVersions" \
	"$(printf '%s\n' \
$(get_latest_releases | cut -d'-' -f1,2) \
$(printf %s "$current" | cut -d'-' -f1,2) \
$(dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' | sed -nr \
's/^hi  linux-image-(unsigned-)?([0-9]+\.[0-9]+\.[0-9]+(-[^-]+)?).*/\2/p'))")

	# Restrict to versions that have related linux packages "ok".
	local version okVersions=
	for version in $HeaderVersions; do
		dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' 2>/dev/null |
		 grep -qE '^..[^ ] linux-.+-'"$(literalize $version)"'(-.*)?$' ||
		  okVersions+="$version "
	done
	okVersions=${okVersions%% }
	[[ $okVersions ]] || error 'No suitable version to purge.'
	[[ $(printf %s "$okVersions" | wc -w) == 1 ]] && version=$okVersions ||
	 version=$(getVersionToPurge "$okVersions") || exit $?

	local dir
	for dir in /usr/src/linux-headers-"$version"/ \
	 /usr/src/linux-headers-"$version"-*/; do
		note "Removing $dir"
		[[ $simulate ]] || rm -rf "$dir"
	done
	note "Removing matching initrd image(s). (LP: #1678187)"
	[[ $simulate ]] || rm -fv /boot/initrd.img-"${version}"-*
	note "Purging the kernel by dpkg ..."
	dpkg --$operation --abort-after=1 $simulate \
	$(dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' |
	 awk '/^.i  linux-.+-'"$(literalize ${version})"'(-.*)?$/{print $2}') || {
		error "Purging by dpkg failed; dpkg error $?."
		# NOTE: some packages may have selection state
		# "purge" after this.
	}
	note "Purging finished successfully."
}

purge_manually() {
	# Restrict to releases that have related linux packages "ok".
	local InstalledReleases release version minus_flavour okReleases=
	InstalledReleases=$(dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' \
	| sed -nr 's/^.i  linux-image-(unsigned-)?([0-9]+\.[0-9]+\.[0-9]+.*)/\2/p' \
	| linux-version sort)
	for release in $(get_set_complement "$InstalledReleases" \
	"$(printf '%s\n' $(get_latest_releases) $current)"); do
		version=$(printf %s "$release" | cut -d- -f1,2)
		minus_flavour=${release:${#version}}
		dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' 2>/dev/null \
		 | grep -qE '^..[^ ] linux-.+-'"$(literalize $version)"\
'('"$(literalize $minus_flavour)"')?$' \
		  || okReleases+="$release "
	done

	okReleases=${okReleases%% }

	[[ $okReleases ]] || error 'Could not find a safe kernel to purge.'

	# Choose kernel(s) interactively.
	local ReleasesToPurge
	[[ $(printf %s "$okReleases" | wc -w) == 1 ]] &&
	 ReleasesToPurge=$okReleases || {
		local ManualReleases HoldReleases
		ManualReleases=$(get_manual_releases)
		HoldReleases=$(get_hold_releases)
		ReleasesToPurge=$(getReleasesToPurge "$(for release in $okReleases
		 do
			mark=
			printf %s "$HoldReleases" | grep -Fxq -e "$release" &&
			 mark+=H || mark+='_'
			printf %s "$ManualReleases" | grep -Fxq -e "$release" &&
			 mark+=M || mark+='_'
			printf '%s %s%s%s %s ' "$release" "$mark" "$cs" \
			 $(get_release_size_boot $release) off
		 done)") || exit $?
		[[ $ReleasesToPurge ]] ||
			error 'You should have chosen at least one release.' 2
	}
	for release in $ReleasesToPurge; do
		note 'Removing matching initrd image. (LP: #1678187)'
		[[ $simulate ]] || rm -fv /boot/initrd.img-"${release}"{,.*}
		note 'Deleting the kernel by dpkg ...'
		dpkg --$operation --abort-after=1 $simulate \
			$(dpkg-query -W -f='${Package}\n' |
			awk '/^linux-.+-'"$(literalize $release)"'$/') ||
				error "dpkg failed; dpkg error $?."
				# NOTE: some packages may have selection state "purge".
		[[ $simulate ]] ||
		 dpkg --$operation \
		  $(dpkg-query -W -f='${Package}\n' |
		  awk '/^linux-.+-'"$(literalize $(printf %s $release |
		   cut -d- -f1,2))"'$/') 2>/dev/null || true
		# If purging linux-.+-<version> fails
		# due to linux-.+-<version>-<flavour> being
		# installed and not going to be purged, that is ok.
	done
	if [[ $simulate ]]; then
		note "Did not try to delete non-flavour versioned kernel packages in \
simulation mode."
	fi
}

run_fix() {
	[[ $simulate ]] || remove_extra_initrds
	if [[ $(stat -f --format="%d" /var) -lt 10 ]]; then
		# /var is about to run out of inodes. dpkg and apt-get
		# may not be able to operate.
		# (10 is an estimate of the number of needed free inodes.)
		free_some_inodes
	fi

	while ! { note 'Fixing possible broken packages...'; \
	 apt-get -f $simulate install; }; do
		[[ $simulate ]] || remove_extra_initrds
		printf '\n'
		note "Could not fix broken packages. Lines above may give you clue \
why this happened. Select action accordingly below:"
		while true; do
			printf '%s' "\
1) Delete some kernel(s) to free space and then retry
2) Run 'dpkg --configure -a' and retry. (Choose this, if recommended above.)
3) Quit
#? ";
			read -r answer
			case $answer in
			 1) purge_manually ;;
			 2) dpkg --configure -a $simulate \
				|| error "'dpkg --configure -a' failed and returned $?" ;;
			 3) error 'Could not fix the problem.' ;;
			 *) printf '%s\n' 'Invalid selection'; continue ;;
			esac
			break # break while true
		done

		[[ $simulate ]] && {
			note 'Cannot do more in simulation mode.'
			exit 0
		}
	done

	[[ $simulate ]] || note "Fixing finished successfully.
HINT: You may run the command again without --fix option to possibly purge \
more versioned kernel packages."
}

purge_normally() {
	local Pkgs Releases ReleasesToKeep LatestReleases HoldReleases \
	ManualReleases release Items ReleasesToPurge KeepRegex version \
	PkgsToPurge locked version minus_flavour
	if ! ((no_booted)) && \
	! $(dpkg-query -W -f='${Package} ${db:Status-Abbrev}\n' 2>/dev/null \
	 | grep -qE '^linux-image-(unsigned-)?'"$(literalize $current)"\
' [ih]i $'); then
		error "Current kernel release $current is not successfully \
installed or it is marked for removal according to the package manager. \
You can either use --no-booted option or try to install the kernel, \
or if you can not do so, try to run this command with --fix option."
	fi

	# Create list of unsuccessfully/partially installed packages.
	Pkgs=$(dpkg-query -W -f='${Package} ${Status}\n' 'linux-*' |
	 awk '$3!="ok" || ($4!="installed" && $4!="not-installed" && $4!="config-files")
	 ')
	if [[ $Pkgs ]]; then
		error "The following kernel packages have invalid state; each package name \
is followed by its state:
$Pkgs

(Refer to the documentation of dpkg for explanation of the package states.)

Hint: Run this command with --fix option.
Hint: If a package flag is 'reinst-required' (instead of 'ok') for some package, \
you may have to reinstall the package by 'apt-get install --reinstall'."
	fi

	# get list of succesfully installed wanted releses
	Releases=$(dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' |
	 sed -nr 's/^[ih]i  linux-image-(unsigned-)?([0-9]+\.[0-9]+\.[0-9]+.*)/\2/p' | linux-version sort)

	if [[ -z $keep ]]; then
		[[ $manual ]] && {
			# do not keep manually installed releases unless they are marked
			# with "hold".
			ManualReleases=$(get_manual_releases)
			HoldReleases=$(get_hold_releases)
			ReleasesToKeep=$(printf '%s\n' $current \
			$(get_set_complement "$Releases" "$ManualReleases") $HoldReleases \
			| linux-version sort | uniq)
		} ||
		ReleasesToKeep=$Releases
	else
		ReleasesToKeep=
		LatestReleases=$(get_latest_releases)
		[[ $LatestReleases ]] || error 'Could not determine which kernels to keep.'
		for release in $LatestReleases; do
			[[ $ReleasesToKeep ]] && ReleasesToKeep+=$'\n'
			ReleasesToKeep+=$(printf %s "$Releases" |
			grep -e '-'$(printf %s "$release" | cut -s -d- -f3-)'$' |
			 grep -Fx -B $n -m 1 $release)
		done

		# Keep manually installed kernels, if wanted, and kernels marked for
		# hold and the currently booted kernel (though it may be included already).
		[[ $auto_only ]] && ManualReleases=$(get_manual_releases)
		HoldReleases=$(get_hold_releases)
		ReleasesToKeep=$(printf '%s\n' \
		$ReleasesToKeep $current $([[ $auto_only ]] && printf %s \
		 "$ManualReleases") $HoldReleases | linux-version sort | uniq)
	fi

	if [[ $choose ]]; then
		# Choose kernels interactively.

		# These releases depend on available meta kernels;
		# if you purge one, you will purge the meta kernel, too:
		LatestAvailableReleases=$(get_latest_available_releases)
		# Create certain lists, if not done already
		[[ ${LatestReleases+x} ]] || LatestReleases=$(get_latest_releases)
		[[ ${ManualReleases+x} ]] || ManualReleases=$(get_manual_releases)
		[[ ${HoldReleases+x} ]] || HoldReleases=$(get_hold_releases)

		Items=$(for release in $Releases; do
			if [[ $release != "$current" ]]; then
				mark=
				printf %s "$LatestReleases" | grep -Fxq -e "$release" &&
				 mark='+' || mark='_'
				printf %s "$LatestAvailableReleases" | grep -Fxq -e "$release" &&
				 mark='*' || :
				printf %s "$HoldReleases" | grep -Fxq -e "$release" && mark+=H ||
				 mark+='_'
				printf %s "$ManualReleases" | grep -Fxq -e "$release" && mark+=M ||
				 mark+='_'
				printf %s "$ReleasesToKeep" | grep -Fxq -e "$release" &&
				 status=off || status=on
				printf '%s %s%s%s %s ' "$release" "$mark" "$cs" \
				 $(get_release_size_boot $release) $status
			fi
		done)

		if [[ -z $Items ]]; then
			note 'No kernels to choose from.' >&2
			ReleasesToPurge=
		else
			ReleasesToPurge=$(getReleasesToPurge "$Items") || { err_code=$?
			 [[ $err_code -eq 1 ]] && exit 0 || exit $err_code; }
		fi
		if [[ $ReleasesToPurge ]]; then
			ReleasesToKeep=$(get_set_complement "$Releases" "$ReleasesToPurge")
		else
			ReleasesToKeep="$Releases"
		fi
	fi

	KeepRegex=
	for release in $ReleasesToKeep; do
		[[ $KeepRegex ]] && KeepRegex+=$'\n'
		# Keep kernel packages with and without the flavor.
		version=$(printf %s "$release" | cut -d- -f1,2)
		minus_flavour=${release:${#version}}
		KeepRegex+='-'$(literalize "$version")'('$(literalize "$minus_flavour")')?$'
	done

	PkgsToPurge=$(dpkg-query -W -f='${db:Status-Abbrev} ${Package}\n' |
	 awk '/^.[^n]  linux-.+-[0-9]+\.[0-9]+\.[0-9]+/{print $2}' | {
	  grep -Evf <(printf '%s' "$KeepRegex") || [[ $? -eq 1 ]]; })

	if [[ $operation == remove && $PkgsToPurge ]]; then
		PkgsToPurge=$(dpkg-query -W -f'${db:Status-Abbrev} ${Package}\n' \
		$PkgsToPurge | awk '$1 != "rc"{print $2}')
	fi

	if [[ $list ]]; then
		echo $PkgsToPurge | tr ' ' $'\n'
		exit 0
	fi

	if [[ $PkgsToPurge ]]; then

		[[ $simulate ]] || {
			remove_extra_initrds
			locked=$(fuser -v "$lockfile" 2>&1 | awk 'NR == 2{print $3, $5}')
			# locked contains process id and command name of the process
			# locking dpkg.
			[[ $locked ]] && {
				date
				note "Waiting for process ${locked%% *} (${locked#* }) to finish..."
				while fuser "$lockfile" &>/dev/null; do sleep 1; done
				date
			}

			# disable update-grub; restore after purging has finished.
			# This will speed up purging somewhat.
			[[ $optimize && $update_grub ]] && chmod -x "$update_grub" && {
			  note "Made '$update_grub' non-executable temporarily to speed up purging."
			  update_grub_disabled=1
			}
		}
		apt-get $simulate $yes $operation $PkgsToPurge || {
			err_code=$?
			[[ err_code -eq 1 ]] && exit 0 # User aborted
			[[ $update_grub_disabled ]] && run_update_grub
			error "apt-get failed; apt-get error $err_code.
Hint: try running the command with --fix option."
		}
		[[ $update_grub_disabled ]] && run_update_grub
	fi

	[[ $simulate ]] || remove_extra_initrds
}

operate() {
	[[ $clear_boot ]] && clear_boot
	if [[ $fix ]]; then
		run_fix
	else
		purge_normally
	fi
}

# Main program

# Handle command line options
env -u GETOPT_COMPATIBLE getopt --test >/dev/null ||
[[ $? -eq 4 ]] || error '`getopt --test` failed in this environment.' 4
# This should not happen with util-linux's getopt.
params=$(env -u GETOPT_COMPATIBLE getopt -o abcd::fhi:k:lmnostrVvy -l \
auto-only,clear-boot,choose,debug::,fix,help,info,no-booted,\
interface:,keep:,list,manual,no-legend,optimize,remove,simulate,\
version,yes --name "[$program_name] ERROR" -- "$@") \
|| {
	err_code=$?
	case $err_code in
		1) echo 1 >"$error_file"; exit 2 ;;
		*) error "getopt exited with error code $err_code" 4
	esac
}

eval set -- "$params"
while :; do
	case ${1-} in
		-a|--auto-only)
			auto_only=1
			;;
		-b|--clear-boot)
			clear_boot=1
			;;
		-c|--choose)
			choose=1
			;;
		-d|--debug)
			[[ $2 ]] && {
				touch -- "$2" && [[ -w $2 ]] && debug_file=$2 \
				|| error 'Can not write to the debug file.' 2
			}
			debug='debug'; shift
			;;
		 -f|--fix)
			fix=1
			;;
		-h|--help)
			show_help; exit
			;;
		--info)
			info=1
			;;
		-i|--interface)
			case $2 in
			 w|whiptail) interface=w ;;
			 d|dialog) interface=d ;;
			 *) error "'$2' is invalid interface ID." 2
			esac
			shift
			;;
		-k|--keep)
			keep=1; n=$2; shift
			;;
		-l|--list)
			list=1;	simulate=1
			;;
		-m|--manual)
			manual=1
			;;
		-n|--no-legend)
			legend=
			;;
		-o|--optimize)
			optimize=1
			;;
		-r|--remove)
			operation=remove
			;;
		-s|--simulate)
			simulate='--simulate'
			;;
		-t|--no-booted)
			no_booted=1
			;;
		-V|--version)
			show_version; exit
			;;
		-v|--verbose)
			operation+=" -V"
			;;
		-y|--yes)
			yes='-y'
			;;
		--) # End of all options.
			shift; break
	esac

	shift
done

[[ $# -eq 0 ]] || error "No operand allowed. ($1)" 2

((no_booted)) && current='' || current=$(uname -r)

[[ $debug && -z $debug_file ]] \
&& {
	debug_file=$(mktemp $TMPDIR/linux-purge.debug_XXX)
	show_debug_filename=1
}

[[ $(realpath -e / 2>/dev/null) == / ]] \
&& path_resolver=realpath \
|| path_resolver=readlink

[[ $info ]] && {
	$debug show_info
	exit 0
}

if [[ $keep ]]; then
	[[ "$n" =~ ^[0-9]+$ ]] ||
	error "'$n' is invalid number of older kernels to keep." 2
fi
# $n is valid number, if needed

[[ $auto_only && ! $keep ]] || [[ $keep && $manual ]] || [[ $fix && \
($keep || $manual || $choose || $yes || $optimize || $list) ]] \
|| [[ $list && $clear_boot ]] &&
  error "Invalid combination of options. Hint:
  $program_name -h" 2

# Ensure superuser privileges, if required
[[ -z $simulate && $EUID -ne 0 ]] &&
error "Must be run as root, if not in simulation mode. Hint:
  $program_name -h" 2

# make sure update-grub is executable, if needed
[[ $simulate ]] || {
	update_grub=$(command -v update-grub || true)
	[[ $update_grub ]] && chmod +x "$update_grub"
}

[[ $interface = d ]] && {
	hash dialog 2>/dev/null || {
		interface=w
		((fix+choose)) \
&& warn 'Using whiptail because package dialog is not installed.'
	}
}
[[ $interface = w ]] && {
	hash whiptail 2>/dev/null || {
		((fix+choose)) && error 'whiptail is not installed.'
	}
}

if [[ $debug ]]; then
	debug operate
else
	operate
	note 'Operation finished successfully. Please consider donating.'
fi
